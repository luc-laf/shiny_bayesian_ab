rownames(master_df) <- 1:nrow(master_df)
mode="test"
if(mode=="test"){
pre.period_start <- grep("09APR2016", master_df$date)
post.period_start <- grep("14AUG2016", master_df$date)
post.period_end <- grep("02SEP2016", master_df$date)
} else if(mode=="post_test"){
pre.period_start <- grep("14AUG2016", master_df$date)
post.period_start <- grep("03SEP2016", master_df$date)
post.period_end <- grep("30SEP2016", master_df$date)
}
source <- c("CRM", "Direct_To_Site", "Partners", "SEM_Brand", "SEM_NonBrand", "SEO_Brand", "SEO_NonBrand")
cimodel.impact <- function(data, metric, segment, post.period_start, model="simple"){
north <- master_df[paste( metric, "_North", source, sep="")]
south <- master_df[paste( metric, "_South", Source, sep="")]
model.data <- cbind(north, south)
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
#list.model.args = list(niter = 10**3
# , nseasons = 7 , season.duration = 1
# , dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period)#, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, metric="enquiriess", segment ="SO", post.period_start)
plot(ci.results)
summary(ci.results)
ci.results <- cimodel.impact(master_df, metric="enquiriess", segment ="CRM", post.period_start)
plot(ci.results)
summary(ci.results)
source <- c("CRM", "Direct_To_Site", "Partners", "SEM_Brand", "SEM_NonBrand", "SEO_Brand", "SEO_NonBrand")
cimodel.impact <- function(data, metric, segment, post.period_start, model="simple"){
north <- master_df[paste( metric, "_North", source, sep="")]
south <- master_df[paste( metric, "_South", source, sep="")]
model.data <- cbind(north, south)
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
#list.model.args = list(niter = 10**3
# , nseasons = 7 , season.duration = 1
# , dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period)#, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, metric="enquiriess", segment ="CRM", post.period_start)
plot(ci.results)
summary(ci.results)
sources <- c("CRM", "Direct_To_Site", "Partners", "SEM_Brand", "SEM_NonBrand", "SEO_Brand", "SEO_NonBrand")
cimodel.impact <- function(data, metric, segment, post.period_start, model="simple"){
north <- master_df[paste( metric, "_North", source, sep="")]
south <- master_df[paste( metric, "_South", sources, sep="")]
model.data <- cbind(north, south)
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
#list.model.args = list(niter = 10**3
# , nseasons = 7 , season.duration = 1
# , dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period)#, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="CRM", post.period_start)
plot(ci.results)
summary(ci.results)
cimodel.impact <- function(data, metric, source, post.period_start, model="simple"){
north <- master_df[paste( metric, "_North", source, sep="")]
south <- master_df[paste( metric, "_South", sources, sep="")]
model.data <- cbind(north, south)
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
#list.model.args = list(niter = 10**3
# , nseasons = 7 , season.duration = 1
# , dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period)#, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="CRM", post.period_start)
plot(ci.results)
summary(ci.results)
mode="test"
if(mode=="test"){
pre.period_start <- grep("09APR2016", master_df$date)
post.period_start <- grep("14AUG2016", master_df$date)
post.period_end <- grep("02SEP2016", master_df$date)
} else if(mode=="post_test"){
pre.period_start <- grep("14AUG2016", master_df$date)
post.period_start <- grep("03SEP2016", master_df$date)
post.period_end <- grep("30SEP2016", master_df$date)
}
sources <- c("CRM", "Direct_To_Site", "Partners", "SEM_Brand", "SEM_NonBrand", "SEO_Brand", "SEO_NonBrand")
cimodel.impact <- function(data, metric, source, post.period_start, model="simple"){
north <- master_df[paste( metric, "_North", source, sep="")]
south <- master_df[paste( metric, "_South", sources, sep="")]
model.data <- cbind(north, south)
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
#list.model.args = list(niter = 10**3
# , nseasons = 7 , season.duration = 1
# , dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period)#, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="CRM", post.period_start)
plot(ci.results)
summary(ci.results)
paste( enquiriess, "_South", sources, sep="")
paste( "enquiriess", "_South", sources, sep="")
master_df[paste( "enquiriess", "_South", sources, sep="")]
library(CausalImpact)
master_df <- read.csv("/media/sf_Z_DRIVE/Brand/VOD Regional Test North South (LL) Sep 16/Output/SOURCE_SUM_01JAN15_30SEP16.csv")
subsetdate <- grep("01JAN2016", master_df$date)
master_df <- master_df[subsetdate:nrow(master_df),]
master_df <- master_df[-grep("05AUG2016", master_df$date),]
rownames(master_df) <- 1:nrow(master_df)
mode="test"
if(mode=="test"){
pre.period_start <- grep("09APR2016", master_df$date)
post.period_start <- grep("14AUG2016", master_df$date)
post.period_end <- grep("02SEP2016", master_df$date)
} else if(mode=="post_test"){
pre.period_start <- grep("14AUG2016", master_df$date)
post.period_start <- grep("03SEP2016", master_df$date)
post.period_end <- grep("30SEP2016", master_df$date)
}
sources <- c("CRM", "Direct_To_Site", "Partners", "SEM_Brand", "SEM_NonBrand", "SEO_Brand", "SEO_NonBrand")
cimodel.impact <- function(data, metric, source, post.period_start, model="simple"){
north <- master_df[paste( metric, "_North", source, sep="")]
south <- master_df[paste( metric, "_South", sources, sep="")]
model.data <- cbind(north, south)
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
#list.model.args = list(niter = 10**3
# , nseasons = 7 , season.duration = 1
# , dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period)#, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="CRM", post.period_start)
plot(ci.results)
summary(ci.results)
View(master_df)
cimodel.impact <- function(data, metric, source, post.period_start, model="simple"){
north <- master_df[paste( metric, "_North", source, sep="")]
south <- master_df[paste( metric, "_South", source, sep="")]
model.data <- cbind(north, south)
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
#list.model.args = list(niter = 10**3
# , nseasons = 7 , season.duration = 1
# , dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period)#, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="CRM", post.period_start)
plot(ci.results)
summary(ci.results)
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="Partners", post.period_start)
plot(ci.results)
summary(ci.results)
cimodel.impact <- function(data, metric, source, post.period_start, model="simple"){
north <- master_df[paste( metric, "_North", source, sep="")]
south <- master_df[paste( metric, "_South", sources, sep="")]
model.data <- cbind(north, south)
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
#list.model.args = list(niter = 10**3
# , nseasons = 7 , season.duration = 1
# , dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period)#, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="SEM_Brand", post.period_start)
plot(ci.results)
summary(ci.results)
master_df[is.na(master_df)] <- 0
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="SEM_Brand", post.period_start)
plot(ci.results)
summary(ci.results)
sources <- c("CRM", "Direct_To_Site", "SEM_Brand", "Partners", "SEM_NonBrand", "SEO_Brand", "SEO_NonBrand")
cimodel.impact <- function(data, metric, source, post.period_start, model="simple"){
north <- master_df[paste( metric, "_North", source, sep="")]
south <- master_df[paste( metric, "_South", sources, sep="")]
model.data <- cbind(north, south)
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
#list.model.args = list(niter = 10**3
# , nseasons = 7 , season.duration = 1
# , dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period)#, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="SEM_Brand", post.period_start)
plot(ci.results)
summary(ci.results)
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="SEM_NonBrand", post.period_start)
plot(ci.results)
summary(ci.results)
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="SEO_Brand", post.period_start)
plot(ci.results)
summary(ci.results)
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="SEO_NonBrand", post.period_start)
plot(ci.results)
summary(ci.results)
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="CRM", post.period_start)
plot(ci.results)
summary(ci.results)
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="Direct_To_Site", post.period_start)
plot(ci.results)
summary(ci.results)
ci.results <- cimodel.impact(master_df, metric="enquiriess", source ="Partners", post.period_start)
plot(ci.results)
summary(ci.results)
ci.results <- cimodel.impact(master_df, "enquiries", post.period_start)
plot(ci.results)
summary(ci.results)
library(CausalImpact)
master_df <- read.csv("/media/sf_Z_DRIVE/Brand/VOD Regional Test North South (LL) Sep 16/Output/KPIs_D_01Jan15_02Sep16.csv")
subsetdate <- grep("01JAN2016", master_df$date)
master_df <- master_df[subsetdate:nrow(master_df),]
master_df <- master_df[-grep("05AUG2016", master_df$date),]
rownames(master_df) <- 1:nrow(master_df)
pre.period_start <- grep("09APR2016", master_df$date)
post.period_start <- grep("14AUG2016", master_df$date)
post.period_end <- grep("02SEP2016", master_df$date)
#sem_regional.csv
master_df[is.na(master_df)] <- 0
northern <- c("Central", "NorthWest", "Yorkshire")
southern <- c("SouthWest", "SouthEast", "London")
fix.var_names <- function(metric, region){
fix.name <- paste( metric, region, sep="_")
return(fix.name)
}
cimodel.impact <- function(data, metric, post.period_start, model="simple"){
northern_names <- sapply(northern, fix.var_names, metric=metric)
southern_names <- sapply(southern, fix.var_names, metric=metric)
north <- rowSums(data[northern_names])
south <- (data[southern_names])
if(model=="simple"){
model.data <- cbind(north, south)
}else{
model.data <- cbind(north, south)
}
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
#list.model.args = list(niter = 10**3
#                      , nseasons = 7 , season.duration = 1
#                     , dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period)#, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, "enquiries", post.period_start)
plot(ci.results)
summary(ci.results)
ci.results$series
ci.results$series$point.effect
pointwise <- ci.results$series$point.effect
clipboard <- function(x, sep="\t", row.names=FALSE, col.names=TRUE){
con <- pipe("xclip -selection clipboard -i", open="w")
write.table(x, con, sep=sep, row.names=row.names, col.names=col.names)
close(con)
}
clipboard(pointwise)
master_df$date
dates <- master_df$date
clipboard(dates)
master_df <- read.csv("/media/sf_Z_DRIVE/Brand/VOD Regional Test North South (LL) Sep 16/Output/SEGMENT_SUM_01JAN15_30SEP16.csv")
shiny::runApp('/media/sf_Z_DRIVE/Customer Base/Customer Segmentation 2013/Workings/SegmentationApp')
library(CausalImpact)
master_df <- read.csv("/media/sf_Z_DRIVE/Brand/VOD Regional Test North South (LL) Sep 16/Output/sem_regional.csv")
names(master_df)[1] <- "date"
names(master_df)[2:length(names(master_df))] <- gsub("KPI_sem_imp", "BI", names(master_df)[2:length(names(master_df))])
subsetdate <- grep("01/01/2016", master_df$date)
master_df <- master_df[subsetdate:nrow(master_df),]
rownames(master_df) <- 1:nrow(master_df)
pre.period_start <- grep("09/04/2016", master_df$date)
post.period_start <- grep("14/08/2016", master_df$date)
post.period_end <- grep("02/09/2016", master_df$date)
#sem_regional.csv
master_df[is.na(master_df)] <- 0
northern <- c("Midlands", "NorthWest", "NorthEast", "Yorkshire")
southern <- c("SouthWest", "SouthEast")
fix.var_names <- function(metric, region){
fix.name <- paste( metric, region, sep="_")
return(fix.name)
}
cimodel.impact <- function(data, metric, post.period_start, model="simple"){
northern_names <- sapply(northern, fix.var_names, metric=metric)
southern_names <- sapply(southern, fix.var_names, metric=metric)
north <- rowSums(data[northern_names])
south <- rowSums(data[southern_names])
if(model=="simple"){
model.data <- cbind(north, south)
}else{
model.data <- cbind(north, south)
}
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
list.model.args = list(niter = 10**3
, nseasons = 7 , season.duration = 1
, dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, "BI", post.period_start, model="complex")
plot(ci.results)
summary(ci.results)
master_df <- read.csv("/media/sf_Z_DRIVE/Brand/VOD Regional Test North South (LL) Sep 16/Output/sem_regional.csv")
View(master_df)
master_df <- read.csv("/media/sf_Z_DRIVE/Brand/VOD Regional Test North South (LL) Sep 16/Output/sem_regional.csv")
View(master_df)
master_df <- read.csv("/media/sf_Z_DRIVE/Brand/VOD Regional Test North South (LL) Sep 16/Output/sem_regional.csv")
names(master_df)[1] <- "date"
names(master_df)[2:length(names(master_df))] <- gsub("KPI_sem_imp", "BI", names(master_df)[2:length(names(master_df))])
subsetdate <- grep("01/01/2016", master_df$date)
master_df <- master_df[subsetdate:nrow(master_df),]
rownames(master_df) <- 1:nrow(master_df)
pre.period_start <- grep("09/04/2016", master_df$date)
post.period_start <- grep("14/08/2016", master_df$date)
post.period_end <- grep("02/09/2016", master_df$date)
cimodel.impact <- function(data, metric, post.period_start){
model.data <- cbind(master_df$North, master_df$Scotland)
pre.period <- c(pre.period_start, post.period_start-1)
post.period <- c(post.period_start, post.period_end)
list.model.args = list(niter = 10**3
, nseasons = 7 , season.duration = 1
, dynamic.regression = FALSE)
impact <- CausalImpact(model.data, pre.period, post.period, model.args=list.model.args)
return(impact)
}
ci.results <- cimodel.impact(master_df, "BI", post.period_start, model="complex")
plot(ci.results)
summary(ci.results)
ci.results <- cimodel.impact(master_df, "BI", post.period_start)
plot(ci.results)
summary(ci.results)
shiny::runApp('/media/sf_Z_DRIVE/Customer Base/Customer Segmentation 2013/Workings/SegmentationApp')
runApp('/media/sf_Z_DRIVE/Customer Base/Customer Segmentation 2013/Workings/SegmentationApp')
shiny::runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
bayesian_test(v1_success =  10,
v1_vol = 20,
v2_success = 5,
v2_vol = 10)
bayesian_test <- function(prior_success=1, prior_vol=1, v1_success, v1_vol, v2_success, thresh=0, v2_vol, n.trials=100000){
#parameters for the posterior Beta distibution
v1_beta.A <- v1_success + prior_success
v1_beta.B <- (v1_vol - v1_success) + (prior_vol - prior_success)
v2_beta.A <- v2_success + prior_success
v2_beta.B <- (v2_vol - v2_success) + (prior_vol - prior_success)
#sample from beta distributions
v1_rbeta <- rbeta(n.trials, v1_beta.A , v1_beta.B)
v2_rbeta <- rbeta(n.trials, v2_beta.A , v2_beta.B)
#randomly sample from the beta distributions for monte carlo integration of distribution of difference
v1wins <- sum(v1_rbeta-v2_rbeta > thresh)/n.trials
v2wins <- sum(v2_rbeta-v1_rbeta > thresh)/n.trials
practicalEquiv <- 1 - (v1wins + v2wins)
#distributions of results
results_p_dist <- c(practicalEquiv, v1wins, v2wins)
#keep mean for now change to max aposteriori pred later
map_diff <- abs(mean(v1wins)-mean(v2wins))
if(v1wins>v2wins &&  map_diff>thresh){
winner = 1
} else if(v2wins>v1wins &&  map_diff>thresh){
winner = 2
} else {
winner = 0
return(val)
}
results <- list("winner"=winner,
"v1_beta.A"=v1_beta.A, "v1_beta.B"=v1_beta.B,
"v2_beta.A"=v2_beta.A, "v2_beta.B"=v2_beta.B,
"dist"=results_p_dist, "diff"=map_diff)
return(results)
}
bayesian_test(v1_success =  10,
v1_vol = 20,
v2_success = 5,
v2_vol = 10)
data.frame(bayesian_test(v1_success =  10,
v1_vol = 20,
v2_success = 5,
v2_vol = 10))
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
bayesian_test(v1_success =  10,
v1_vol = 20,
v2_success = 5,
v2_vol = 10)
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
bayesian_test(v1_success =  1,
v1_vol = 1,
v2_success = 1,
v2_vol = 1)
bayesian_test <- function(prior_success=1, prior_vol=1, v1_success, v1_vol, v2_success, thresh=0, v2_vol, n.trials=100000){
#parameters for the posterior Beta distibution
v1_beta.A <- v1_success + prior_success
v1_beta.B <- (v1_vol - v1_success) + (prior_vol - prior_success)
v2_beta.A <- v2_success + prior_success
v2_beta.B <- (v2_vol - v2_success) + (prior_vol - prior_success)
#sample from beta distributions
v1_rbeta <- rbeta(n.trials, v1_beta.A , v1_beta.B)
v2_rbeta <- rbeta(n.trials, v2_beta.A , v2_beta.B)
#randomly sample from the beta distributions for monte carlo integration of distribution of difference
v1wins <- sum(v1_rbeta-v2_rbeta > thresh)/n.trials
v2wins <- sum(v2_rbeta-v1_rbeta > thresh)/n.trials
practicalEquiv <- 1 - (v1wins + v2wins)
#distributions of results
results_p_dist <- c(practicalEquiv, v1wins, v2wins)
#keep mean for now change to max aposteriori pred later
map_diff <- abs(mean(v1wins)-mean(v2wins))
if(v1wins>v2wins &&  map_diff>thresh){
winner = 1
} else if(v2wins>v1wins &&  map_diff>thresh){
winner = 2
} else {
winner = 0
}
results <- list("winner"=winner,
"v1_beta.A"=v1_beta.A, "v1_beta.B"=v1_beta.B,
"v2_beta.A"=v2_beta.A, "v2_beta.B"=v2_beta.B,
"dist"=results_p_dist, "diff"=map_diff)
return(results)
}
bayesian_test(v1_success =  1,
v1_vol = 1,
v2_success = 1,
v2_vol = 1)
a_dens <- dbeta(probs, 2, 2)
b_dens <- dbeta(probs, 2, 2)
probs <- seq(0,1,length=1000)
a_dens <- dbeta(probs, 2, 2)
b_dens <- dbeta(probs, 2, 2)
ggplot() + geom_line(aes(probs,a_dens, color="red"))+geom_line(aes(probs,b_dens, color="blue"))
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
bayesian_test(v1_success =  1,
v1_vol = 1,
v2_success = 1,
v2_vol = 1)
a_dens <- dbeta(probs, 2, 0)
b_dens <- dbeta(probs, 2, 0)
ggplot() + geom_line(aes(probs,a_dens, color="red"))+geom_line(aes(probs,b_dens, color="blue"))
a_dens <- dbeta(probs, 1, 1)
b_dens <- dbeta(probs, 1, 1)
ggplot() + geom_line(aes(probs,a_dens, color="red"))+geom_line(aes(probs,b_dens, color="blue"))
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
bayesian_test(v1_success =  1,
v1_vol = 1,
v2_success = 1,
v2_vol = 1)
bayesian_test(v1_success =  1,
v1_vol = 1,
v2_success = 1,
v2_vol = 1)
bayesian_test(v1_success =  1,
v1_vol = 2,
v2_success = 1,
v2_vol = 2)
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
ggplot(c(0.1,0.2,0.3))
qplot(c(0.1,0.2,0.3))
qplot(x=c("A wins", "B wins", "Drwaw"), y =c(0.1,0.2,0.3), geom=bar)
qplot(x=c("A wins", "B wins", "Drwaw"), y =c(0.1,0.2,0.3), geom=barplot)
qplot(x=c("A wins", "B wins", "Drwaw"), y =c(0.1,0.2,0.3), geom="bar")
qplot(x=c("A wins", "B wins", "Drwaw"), y =c(0.1,0.2,0.3), geom="bar", stat="identity")
qplot(x=c("A wins", "B wins", "Drwaw"), y =c(0.1,0.2,0.3), geom="bar", stat_count()
="identity")
ggplot(x=c("A wins", "B wins", "Drwaw"), y =c(0.1,0.2,0.3), geom="bar", stat="identity")
ggplot(aes(x=c("A wins", "B wins", "Drwaw"), y =c(0.1,0.2,0.3)), geom="bar", stat="identity")
qplot(x=c("A wins", "B wins", "Drwaw"), y =c(0.1,0.2,0.3), geom="bar")+ geom_bar(stat="identity")
ggplot() + geom_bar(aes(("A wins", "B wins", "Drwaw"), y =c(0.1,0.2,0.3)), stat="identity")
ggplot() + geom_bar(aes(c("A wins", "B wins", "Drwaw"), y =c(0.1,0.2,0.3)), stat="identity")
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
a <- c(0,1,2,3,)
a <- c(0,1,2,3,3)
a[1:]
a[1:2]
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
pmax(c(0,1,2))
max(c(0,1,2))
max(c(0,1,2))
max(c(0,1,3))
which.max(c(0,1,3))
which.max(c(0,5,3))
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
which.max(1,2,2)
which.max(c(1,2,2))
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
runApp('Shiny_Apps/shiny_bayesian_ab/shiny_bayesian_ab')
